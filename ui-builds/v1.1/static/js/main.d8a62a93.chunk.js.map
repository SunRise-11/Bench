{"version":3,"sources":["utils/brt.ts","pages/Dashboard/CPUUsage.tsx","pages/Dashboard/MemoryUsage.tsx","pages/Dashboard/Disk.tsx","pages/Dashboard/MemoryDetails.tsx","utils/types.ts","utils/useFetch.ts","pages/Dashboard/SystemMetrics.tsx","utils/service.ts","pages/Dashboard/JournalMetrics.tsx","pages/Dashboard/Dashboard.tsx","pages/FloodPing/index.tsx","pages/Monitoring/Jitter.tsx","utils/filterUrl.ts","pages/Jitter/JitterModule.tsx","pages/Monitoring/Columns.tsx","pages/Monitoring/Matrix.tsx","pages/Monitoring/ResLength.tsx","pages/Monitoring/Delay.tsx","pages/Monitoring/Ping.tsx","pages/Monitoring/RouteDetails.tsx","pages/Monitoring/Monitoring.tsx","pages/Ping/PingModule.tsx","pages/Settings/index.tsx","router/Navigation.tsx","layouts/Sidebar.tsx","layouts/BaseLayout.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TimeInstance","React","memo","series","name","data","cpuMetrics","options","chart","type","xaxis","categories","labels","show","rotate","rotateAlways","hideOverlappingLabels","trim","background","dataLabels","enabled","stroke","curve","lineCap","width","subtitle","text","align","fill","opacity","gradient","shade","shadeIntensity","inverseColors","opacityFrom","opacityTo","height","memoryUsagePercentMetrics","seriesDiskIO","diskIO","seriesCache","cache","className","animations","easing","speed","animateGradually","delay","dynamicAnimation","availableBytes","freeBytes","totalBytes","usedBytes","formatTime","times","split","l","length","HOST_IP","useFetch","url","useState","status","response","setResponse","error","setError","isLoading","setIsLoading","requestSent","setRequestSent","useEffect","fetchData","a","fetch","credentials","res","ok","Error","statusText","json","setTimeout","TabPanel","props","children","value","index","other","role","hidden","id","aria-labelledby","Box","p","a11yProps","useStyles","makeStyles","theme","root","flexGrow","backgroundColor","palette","paper","SystemMetrics","showLoader","classes","setValue","endTimestamp","Date","getTime","Hour","then","err","Alert","severity","values","responseInFormat","metricValues","cpuUsageSlice","diskSliceCache","diskSliceDiskIO","memorySliceAvailableBytes","memorySliceFreeBytes","memorySliceTotalBytes","memorySliceUsedBytes","memoryUsedPercentSlice","metric","push","y","cpuTotalUsage","x","timestamp","disk","cached","memory","usedPercent","segregateMetrics","style","marginBottom","AppBar","position","Tabs","onChange","_event","newValue","indicatorColor","Tab","label","MemoryUsage","Disk","JournalMetrics","cerr","cwarn","cevents","ckerr","ckwarn","ckevents","format","seriesSystemd","seriesKernel","Dashboard","updateLoader","Card","CardContent","FloodPing","Jitter","filterUrl","startsWith","replace","datas","jitter","JitterModule","routesDetails","setRoutesDetails","testServicesRoutes","inputValue","setInputValue","showCharts","setShowCharts","jitterData","setJitterData","v","matrix","formatdata","console","undefined","float","marginTop","Autocomplete","event","onInputChange","newInputValue","getChartsData","renderInput","params","TextField","variant","columns","minWidth","toLocaleString","toFixed","round","n","num","parseInt","Math","Pad","Element","timeSeriesPath","showRouteDetails","setData","trigger","setTrigger","updating","setUpdating","warning","showWarning","fetchTimeSeriesDetails","instance","monitoringDetails","Promise","resolve","reject","path","matrixName","fetchDetails","details","inMatrixResponse","fetchMatrix","TableRow","TableCell","fontSize","Badge","color","ping","avgValue","monitor","resLength","CircularProgress","disableShrink","size","thickness","onClick","key","Matrix","TableContainer","maxHeight","overflowY","Table","stickyHeader","TableHead","map","column","i","fontWeight","TableBody","ResLength","Delay","Ping","min","mean","max","RouteDetailsComponent","routesChains","showDetails","responseDetailsDelay","responseDetailsResponse","pingMin","pingMean","pingMax","minValue","maxValue","ServicesState","isActive","setIsActive","fetchState","Switch","checked","Monitoring","setShowRouteDetails","routeDetailsData","setRouteDetailsData","RouteDetails","PingModule","pingData","setPingData","Settings","Navigator","exact","render","component","display","nested","paddingLeft","spacing","drawerPaper","whiteSpace","transition","transitions","create","sharp","duration","enteringScreen","drawerPaperClose","overflowX","leavingScreen","breakpoints","up","toolbarIcon","alignItems","justifyContent","padding","mixins","toolbar","settings","bottom","Sidebar","handleDrawerClose","open","testListOpen","setTestListOpen","showTestList","menuItems","ListItem","button","Link","to","ListItemIcon","ListItemText","primary","AccessAlarm","NetworkCheck","ExpandLess","ExpandMore","Collapse","in","timeout","unmountOnExit","List","disablePadding","Drawer","clsx","IconButton","ChevronLeft","Divider","_useStyles","appBar","zIndex","drawer","appBarShift","marginLeft","title","paddingRight","menuButton","marginRight","menuButtonHidden","appBarSpacer","content","overflow","container","paddingTop","paddingBottom","BaseLayout","_classes","loader","setLoader","useCallback","setOpen","CssBaseline","Toolbar","edge","aria-label","Menu","Typography","noWrap","LinearProgress","Container","maxWidth","createMuiTheme","blue","typography","fontFamily","join","responsiveFontSizes","App","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d8a62a93.chunk.js","sourcesContent":["enum TimeInstance {\n\tMicrosecond = 1000,\n\tMillisecond = 1000000,\n\tSecond = 1000000000,\n\tMinute = 60000000000,\n\tHour = 60 * 60000000000,\n\tDay = 24 * 60 * 60000000000,\n};\n\nexport const formatTime = (data: string) => {\n  const times = data.split('|');\n  const l = times.length;\n  return `${times[l-3]}:${times[l-2]}:${times[l-1]}`;\n};\n\nexport default TimeInstance;","import React, { FC } from 'react';\nimport Chart from 'react-apexcharts';\nimport { chartData } from '../../utils/queryTypes';\n\ninterface CPUUsageProps {\n  cpuMetrics: chartData[];\n}\n\nconst CPUUsage: FC<CPUUsageProps> = ({ cpuMetrics }) => {\n  const dataFormatted = cpuMetrics;\n  const series = [\n    {\n      name: 'CPU',\n      data: dataFormatted\n    }\n  ];\n  const options = {\n    chart: {\n      type: 'area',\n      xaxis: {\n        type: 'category',\n        categories: [],\n        labels: {\n          show: true,\n          rotate: 45,\n          rotateAlways: true,\n          hideOverlappingLabels: true,\n          trim: true\n        }\n      },\n      background: '#fff'\n    },\n    dataLabels: {\n      enabled: false\n    },\n    stroke: {\n      show: true,\n      curve: 'straight',\n      lineCap: 'butt',\n      width: 1\n    },\n    subtitle: {\n      text: 'CPU usage (in percent)',\n      align: 'center'\n    },\n    fill: {\n      opacity: 1,\n      type: 'gradient',\n      gradient: {\n        shade: 'dark',\n        type: 'vertical',\n        shadeIntensity: 0.6,\n        inverseColors: true,\n        opacityFrom: 1,\n        opacityTo: 0.2\n      }\n    }\n  };\n\n  return (\n    <>\n      <Chart series={series} options={options} height=\"300\" type=\"area\" />\n    </>\n  );\n};\n\nexport default React.memo(CPUUsage);\n","import React, { FC } from 'react';\nimport Chart from 'react-apexcharts';\nimport { chartData } from '../../utils/queryTypes';\n\ninterface MemoryUsagePercentProps {\n  memoryUsagePercentMetrics: chartData[];\n}\n\nconst MemoryUsagePercent: FC<MemoryUsagePercentProps> = ({\n  memoryUsagePercentMetrics\n}) => {\n  const dataFormatted = memoryUsagePercentMetrics;\n  const series = [\n    {\n      name: 'Memory',\n      data: dataFormatted\n    }\n  ];\n  const options = {\n    chart: {\n      type: 'area',\n      background: '#fff'\n    },\n    dataLabels: {\n      enabled: false\n    },\n    stroke: {\n      show: true,\n      curve: 'straight',\n      lineCap: 'butt',\n      width: 1\n    },\n    subtitle: {\n      text: 'Memory (RAM) usage  (in percent)',\n      align: 'center'\n    },\n    fill: {\n      opacity: 1,\n      type: 'gradient',\n      gradient: {\n        shade: 'dark',\n        type: 'vertical',\n        shadeIntensity: 0.6,\n        inverseColors: true,\n        opacityFrom: 1,\n        opacityTo: 0.2\n      }\n    }\n  };\n\n  return (\n    <>\n      <Chart series={series} options={options} height=\"300\" type=\"area\" />\n    </>\n  );\n};\n\nexport default React.memo(MemoryUsagePercent);\n","import React, { FC } from 'react';\nimport Chart from 'react-apexcharts';\nimport { chartData } from '../../utils/queryTypes';\n\ninterface DiskUsageProps {\n  diskIO: chartData[];\n  cache: chartData[];\n}\n\nconst DiskUsage: FC<DiskUsageProps> = ({ diskIO, cache }) => {\n  const seriesDiskIO = [\n    {\n      name: 'Disk IO in bytes (+ve means write / -ve means read)',\n      data: diskIO\n    }\n  ];\n  const seriesCache = [\n    {\n      name: 'Cache (in bytes)',\n      data: cache\n    }\n  ];\n\n  const optionsDiskIO = {\n    chart: {\n      type: 'area',\n      background: '#fff'\n    },\n    dataLabels: {\n      enabled: false\n    },\n    stroke: {\n      show: true,\n      curve: 'straight',\n      lineCap: 'butt',\n      width: 1\n    },\n    subtitle: {\n      text: 'Disk IO in bytes (+ve means write / -ve means read)',\n      align: 'center'\n    }\n  };\n  const optionsCache = {\n    chart: {\n      type: 'area',\n      animations: {\n        enabled: true,\n        easing: 'easeinout',\n        speed: 800,\n        animateGradually: {\n          enabled: true,\n          delay: 150\n        },\n        dynamicAnimation: {\n          enabled: true,\n          speed: 350\n        }\n      },\n      background: '#fff'\n    },\n    dataLabels: {\n      enabled: false\n    },\n    stroke: {\n      show: true,\n      curve: 'straight',\n      lineCap: 'butt',\n      width: 1\n    },\n    subtitle: {\n      text: 'Cache (in bytes)',\n      align: 'center'\n    },\n    fill: {\n      opacity: 1,\n      type: 'gradient',\n      gradient: {\n        shade: 'dark',\n        type: 'vertical',\n        shadeIntensity: 0.6,\n        inverseColors: true,\n        opacityFrom: 1,\n        opacityTo: 0.2\n      }\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-6\">\n        <Chart\n          series={seriesDiskIO}\n          options={optionsDiskIO}\n          height=\"300\"\n          type=\"area\"\n        />\n      </div>\n      <div className=\"col-md-6\">\n        <Chart\n          series={seriesCache}\n          options={optionsCache}\n          height=\"300\"\n          type=\"area\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(DiskUsage);\n","import React, { FC } from 'react';\nimport Chart from 'react-apexcharts';\nimport { chartData } from '../../utils/queryTypes';\n\ninterface MemoryDetailsProps {\n  availableBytes: chartData[];\n  freeBytes: chartData[];\n  totalBytes: chartData[];\n  usedBytes: chartData[];\n}\n\nconst MemoryDetails: FC<MemoryDetailsProps> = ({\n  availableBytes,\n  freeBytes,\n  totalBytes,\n  usedBytes\n}) => {\n  const series = [\n    {\n      name: 'Available',\n      data: availableBytes\n    },\n    {\n      name: 'Free',\n      data: freeBytes\n    },\n    {\n      name: 'Total',\n      data: totalBytes\n    },\n    {\n      name: 'Used',\n      data: usedBytes\n    }\n  ];\n  const options = {\n    chart: {\n      type: 'area',\n      background: '#fff'\n    },\n    dataLabels: {\n      enabled: false\n    },\n    stroke: {\n      show: true,\n      curve: 'straight',\n      lineCap: 'butt',\n      width: 1\n    },\n    subtitle: {\n      text: 'Memory (RAM) details (in kilo-bytes)',\n      align: 'center'\n    },\n    fill: {\n      opacity: 1,\n      type: 'gradient',\n      gradient: {\n        shade: 'dark',\n        type: 'vertical',\n        shadeIntensity: 0.1,\n        inverseColors: true,\n        opacityFrom: 0.8,\n        opacityTo: 0.2\n      }\n    }\n  };\n\n  return (\n    <>\n      <Chart series={series} options={options} height=\"500\" type=\"area\" />\n    </>\n  );\n};\n\nexport default React.memo(MemoryDetails);\n","export const HOST_IP = 'http://localhost:9090';\n\nexport interface service_states {\n  ping: string;\n  floodping: string;\n  jitter: string;\n  monitoring: string;\n}\n\n// System Value details\nexport interface SystemValue {\n  range: rangeValues;\n  queryTime: number;\n  values: dataValues[];\n}\n\ninterface rangeValues {\n  start: any;\n  end: any;\n}\n\ninterface dataValues {\n  Value: dataValue;\n  timestamp: string;\n  normalizedTimes: string;\n}\n\ninterface dataValue {\n  cpuTotalUsage: any;\n  memory: memoryDetails;\n  disk: diskDetails;\n}\n\ninterface memoryDetails {\n  totalBytes: string;\n  availableBytes: string;\n  usedBytes: string;\n  usedPercent: any;\n  freeBytes: any;\n}\n\ninterface diskDetails {\n  diskIO: string;\n  cached: string;\n}\n","import { useState, useEffect } from 'react';\n\nexport type APIResponse<T> = { status: string; data?: T };\n\nexport interface FetchState<T> {\n  response: APIResponse<T>;\n  error?: Error;\n  isLoading: boolean;\n}\n\nexport const useFetch = <T extends {}>(url: string, options?: RequestInit): FetchState<T> => {\n  const [response, setResponse] = useState<APIResponse<T>>({ status: 'start fetching' });\n  const [error, setError] = useState<Error>();\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [requestSent, setRequestSent] = useState<boolean>(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setIsLoading(true);\n        setRequestSent(true);\n        const res = await fetch(url, { cache: 'no-cache', credentials: 'same-origin', ...options });\n        if (!res.ok) {\n          setIsLoading(false);\n          setRequestSent(false);\n          throw new Error(res.statusText);\n        }\n        const json = (await res.json()) as APIResponse<T>;\n        setResponse(json);\n        setIsLoading(false);\n      } catch (error) {\n        setError(error);\n      }\n    };\n    if (!requestSent) {\n      setTimeout(() => {\n        fetchData();\n      }, 1000);\n    }\n  }, [url, options, requestSent]);\n  return { response, error, isLoading };\n};\n","import React, { FC, useEffect, useState } from 'react';\nimport CPUUsage from './CPUUsage';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport PropTypes from 'prop-types';\nimport Box from '@material-ui/core/Box';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Alert from '@material-ui/lab/Alert';\nimport MemoryUsagePercent from './MemoryUsage';\nimport DiskUsage from './Disk';\nimport MemoryDetails from './MemoryDetails';\nimport TimeInstance, { formatTime } from '../../utils/brt';\nimport { HOST_IP } from '../../utils/types';\nimport { APIResponse, init } from '../../utils/service';\nimport { QueryResponse, QueryValues, chartData } from '../../utils/queryTypes';\n\nexport function TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box p={3}>{children}</Box>}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired\n};\n\nexport function a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`\n  };\n}\n\nexport const useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper\n  }\n}));\n\nconst segregateMetrics = (metricValues: QueryValues[]) => {\n  const cpuUsageSlice: chartData[] = [];\n\n  const diskSliceCache: chartData[] = [];\n  const diskSliceDiskIO: chartData[] = [];\n\n  const memorySliceAvailableBytes: chartData[] = [];\n  const memorySliceFreeBytes: chartData[] = [];\n  const memorySliceTotalBytes: chartData[] = [];\n  const memorySliceUsedBytes: chartData[] = [];\n\n  const memoryUsedPercentSlice: chartData[] = [];\n\n  for (const metric of metricValues) {\n    cpuUsageSlice.push({\n      y: metric.value.cpuTotalUsage,\n      x: formatTime(metric.timestamp)\n    });\n\n    diskSliceCache.push({\n      y: metric.value.disk.cached,\n      x: formatTime(metric.timestamp)\n    });\n    diskSliceDiskIO.push({\n      y: metric.value.disk.diskIO,\n      x: formatTime(metric.timestamp)\n    });\n\n    memorySliceAvailableBytes.push({\n      y: metric.value.memory.availableBytes,\n      x: formatTime(metric.timestamp)\n    });\n    memorySliceFreeBytes.push({\n      y: metric.value.memory.freeBytes,\n      x: formatTime(metric.timestamp)\n    });\n    memorySliceTotalBytes.push({\n      y: metric.value.memory.totalBytes,\n      x: formatTime(metric.timestamp)\n    });\n    memorySliceUsedBytes.push({\n      y: metric.value.memory.usedBytes,\n      x: formatTime(metric.timestamp)\n    });\n\n    memoryUsedPercentSlice.push({\n      y: metric.value.memory.usedPercent,\n      x: formatTime(metric.timestamp)\n    });\n  }\n  return {\n    cpuUsageSlice,\n    diskSliceCache,\n    diskSliceDiskIO,\n    memorySliceAvailableBytes,\n    memorySliceFreeBytes,\n    memorySliceTotalBytes,\n    memorySliceUsedBytes,\n    memoryUsedPercentSlice\n  };\n};\n\ninterface SystemMetricsProps {\n  showLoader(status: boolean): any;\n}\n\nconst SystemMetrics: FC<SystemMetricsProps> = ({ showLoader }) => {\n  const classes = useStyles();\n  const [response, setResponse] = useState(init());\n  const [error, setError] = useState('');\n  const [value, setValue] = React.useState(0);\n  const endTimestamp = new Date().getTime() * 1000000 - TimeInstance.Hour;\n\n  useEffect(() => {\n    showLoader(true);\n  }, [showLoader]);\n  useEffect(() => {\n    fetch(\n      `${HOST_IP}/query?timeSeriesPath=storage/system&endTimestamp=${endTimestamp}`\n    )\n      .then(res => res.json())\n      .then(\n        (response: APIResponse<QueryResponse>) => {\n          setResponse(response);\n        },\n        (err: string) => {\n          setError(err);\n        }\n      );\n    // eslint-disable-next-line\n  }, []);\n  const handleChange = (_event, newValue) => {\n    setValue(newValue);\n  };\n\n  if (error) {\n    showLoader(false);\n    return <Alert severity=\"error\">Unable to reach the service: error</Alert>;\n  }\n  if (!response.data.values) {\n    return (\n      <>\n        <Alert severity=\"info\">Fetching data from sources</Alert>\n      </>\n    );\n  }\n\n  const responseInFormat = segregateMetrics(response.data.values);\n  showLoader(false);\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-12\" style={{ marginBottom: '1%' }}>\n        <div className={classes.root}>\n          <AppBar position=\"static\">\n            <Tabs\n              value={value}\n              onChange={handleChange}\n              indicatorColor=\"secondary\"\n            >\n              <Tab label=\"System\" {...a11yProps(0)} />\n              <Tab label=\"Disk\" {...a11yProps(1)} />\n              <Tab label=\"Memory details\" {...a11yProps(2)} />\n            </Tabs>\n          </AppBar>\n          <TabPanel value={value} index={0}>\n            <div className=\"row\">\n              <div className=\"col-md-6\">\n                <CPUUsage cpuMetrics={responseInFormat.cpuUsageSlice} />\n              </div>\n              <div className=\"col-md-6\">\n                <MemoryUsagePercent\n                  memoryUsagePercentMetrics={\n                    responseInFormat.memoryUsedPercentSlice\n                  }\n                />\n              </div>\n            </div>\n          </TabPanel>\n          <TabPanel value={value} index={1}>\n            <div className=\"col-md-12\">\n              <DiskUsage\n                diskIO={responseInFormat.diskSliceDiskIO}\n                cache={responseInFormat.diskSliceCache}\n              />\n            </div>\n          </TabPanel>\n          <TabPanel value={value} index={2}>\n            <div className=\"col-md-12\">\n              <MemoryDetails\n                availableBytes={responseInFormat.memorySliceAvailableBytes}\n                freeBytes={responseInFormat.memorySliceFreeBytes}\n                totalBytes={responseInFormat.memorySliceTotalBytes}\n                usedBytes={responseInFormat.memorySliceUsedBytes}\n              />\n            </div>\n          </TabPanel>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SystemMetrics;\n","import { useFetch } from './useFetch';\nimport { HOST_IP } from './types';\n\nexport interface APIResponse<T> {\n  status: string;\n  data: T;\n}\n\nexport const init = (): {status: string, data: any} => {\n  return {\n    status: '',\n    data: {}\n  }\n}\n\nconst GetSystemData = () => {\n\n  const { response, error } = useFetch(\n    `${HOST_IP}/query?timeSeriesPath=storage/system`\n  );\n\n  if (response) return response\n  else return error\n\n};\n\nconst GetServiceState = () => {\n\n  const { response, error } = useFetch(\n    `${HOST_IP}/service-state`\n  );\n\n  if (response) return response\n  else return error\n\n};\n\n\n\nexport { GetSystemData, GetServiceState }","import React, { FC, useEffect, useState } from 'react';\nimport Chart from 'react-apexcharts';\nimport Alert from '@material-ui/lab/Alert';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { APIResponse, init } from '../../utils/service';\nimport { QueryResponse, QueryValues, chartData } from '../../utils/queryTypes';\nimport { HOST_IP } from '../../utils/types';\nimport TimeInstance, { formatTime } from '../../utils/brt';\nimport { useStyles, TabPanel, a11yProps } from './SystemMetrics';\n\nconst format = (data: QueryValues[] | any) => {\n  const cerr: chartData[] = [];\n  const cwarn: chartData[] = [];\n  const cevents: chartData[] = [];\n  const ckerr: chartData[] = [];\n  const ckwarn: chartData[] = [];\n  const ckevents: chartData[] = [];\n  if (!data) {\n    return {\n      cerr,\n      cwarn,\n      cevents,\n      ckerr,\n      ckwarn,\n      ckevents\n    };\n  }\n  for (const value of data) {\n    cerr.push({\n      y: value.value.cerr,\n      x: formatTime(value.timestamp)\n    });\n    cwarn.push({\n      y: value.value.cwarn,\n      x: formatTime(value.timestamp)\n    });\n    cevents.push({\n      y: value.value.cevents,\n      x: formatTime(value.timestamp)\n    });\n    ckerr.push({\n      y: value.value.ckerr,\n      x: formatTime(value.timestamp)\n    });\n    ckwarn.push({\n      y: value.value.ckwarn,\n      x: formatTime(value.timestamp)\n    });\n    ckevents.push({\n      y: value.value.ckevents,\n      x: formatTime(value.timestamp)\n    });\n  }\n  return {\n    cerr,\n    cwarn,\n    cevents,\n    ckerr,\n    ckwarn,\n    ckevents\n  };\n};\n\nconst JournalMetrics: FC<{}> = () => {\n  const classes = useStyles();\n  const [response, setResponse] = useState(init());\n  const [error, setError] = useState('');\n  const endTimestamp = new Date().getTime() * 1000000 - TimeInstance.Hour;\n  const [value, setValue] = React.useState(0);\n  const handleChange = (_event, newValue) => {\n    setValue(newValue);\n  };\n  useEffect(() => {\n    fetch(\n      `${HOST_IP}/query?timeSeriesPath=storage/journal&endTimestamp=${endTimestamp}`\n    )\n      .then(res => res.json())\n      .then(\n        (response: APIResponse<QueryResponse>) => {\n          setResponse(response);\n        },\n        (err: string) => {\n          setError(err);\n        }\n      );\n    // eslint-disable-next-line\n  }, []);\n  if (error) {\n    return <Alert severity=\"error\">Unable to reach the service: error</Alert>;\n  }\n  if (!response.data) {\n    return <Alert severity=\"info\">Fetching data from sources</Alert>;\n  }\n  const data = format(response.data.values);\n\n  const seriesSystemd = [\n    {\n      name: 'Errors',\n      data: data.cerr\n    },\n    {\n      name: 'Warnings',\n      data: data.cwarn\n    },\n    {\n      name: 'Events',\n      data: data.cevents\n    }\n  ];\n  const seriesKernel = [\n    {\n      name: 'Errors',\n      data: data.ckerr\n    },\n    {\n      name: 'Warnings',\n      data: data.ckwarn\n    },\n    {\n      name: 'Events',\n      data: data.ckevents\n    }\n  ];\n  const optionsSystemd = {\n    chart: {\n      type: 'area',\n      background: '#fff'\n    },\n    dataLabels: {\n      enabled: false\n    },\n    stroke: {\n      show: true,\n      curve: 'straight',\n      lineCap: 'butt',\n      width: 1\n    },\n    subtitle: {\n      text: 'Systemd services',\n      align: 'center'\n    },\n    fill: {\n      opacity: 1,\n      type: 'gradient',\n      gradient: {\n        shade: 'dark',\n        type: 'vertical',\n        shadeIntensity: 0.3,\n        inverseColors: true,\n        opacityFrom: 0.8,\n        opacityTo: 0.2\n      }\n    }\n  };\n  const optionsKernel = {\n    chart: {\n      type: 'area',\n      background: '#fff'\n    },\n    dataLabels: {\n      enabled: false\n    },\n    stroke: {\n      show: true,\n      curve: 'straight',\n      lineCap: 'butt',\n      width: 1\n    },\n    subtitle: {\n      text: 'Kernel',\n      align: 'center'\n    },\n    fill: {\n      opacity: 1,\n      type: 'gradient',\n      gradient: {\n        shade: 'dark',\n        type: 'vertical',\n        shadeIntensity: 0.3,\n        inverseColors: true,\n        opacityFrom: 0.8,\n        opacityTo: 0.2\n      }\n    }\n  };\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Tabs value={value} onChange={handleChange} indicatorColor=\"secondary\">\n          <Tab label=\"Kernel\" {...a11yProps(0)} />\n          <Tab label=\"Systemd\" {...a11yProps(1)} />\n        </Tabs>\n      </AppBar>\n      <TabPanel value={value} index={0}>\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <Chart\n              series={seriesKernel}\n              options={optionsKernel}\n              height=\"300\"\n              type=\"area\"\n            />\n          </div>\n        </div>\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <Chart\n              series={seriesSystemd}\n              options={optionsSystemd}\n              height=\"300\"\n              type=\"area\"\n            />\n          </div>\n        </div>\n      </TabPanel>\n    </div>\n  );\n};\n\nexport default JournalMetrics;\n","import React, { FC } from 'react';\nimport SystemMetrics from './SystemMetrics';\nimport JournalMetrics from './JournalMetrics';\nimport { Card, CardContent } from '@material-ui/core';\n\ninterface DashboardProps {\n  updateLoader(status: boolean): void;\n}\n\nconst Dashboard: FC<DashboardProps> = ({ updateLoader }) => {\n  updateLoader(true);\n  return (\n    <Card>\n      <CardContent>\n        <h4>Dashboard</h4>\n        <hr />\n        <SystemMetrics showLoader={updateLoader} />\n        <hr />\n        <JournalMetrics />\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default Dashboard;\n","import React, { FC } from 'react';\n\nconst FloodPing: FC<{}> = () => {\n  return <div>FloodPing page</div>;\n};\n\nexport default FloodPing;\n","import React, { FC } from 'react';\nimport Chart from 'react-apexcharts';\nimport { chartData } from '../../utils/queryTypes';\n\ninterface JitterProps {\n  value: chartData[];\n}\n\nconst Jitter: FC<JitterProps> = ({ value }) => {\n  const series = [\n    {\n      name: 'min',\n      data: value\n    }\n  ];\n  const options = {\n    chart: {\n      type: 'area',\n      animations: {\n        enabled: true,\n        easing: 'easeinout',\n        speed: 800,\n        animateGradually: {\n          enabled: true,\n          delay: 150\n        },\n        dynamicAnimation: {\n          enabled: true,\n          speed: 350\n        }\n      },\n      background: '#fff'\n    }\n  };\n  return <Chart series={series} options={options} height=\"300\" />;\n};\n\nexport default Jitter;\n","// TODO: improved URL filtering\nconst filterUrl = (url: string) => {\n    let res;\n    if (url.startsWith('https://www.')) {\n      res = url.replace('https://www.', '');\n    } else if (url.startsWith('https://')) {\n      res = url.replace('https://', '');\n    } else if (url.startsWith('http://www.')) {\n      res = url.replace('http://www.', '');\n    } else if (url.startsWith('http://')) {\n      res = url.replace('http://', '');\n    }\n    return res;\n}\n\nexport {filterUrl}","import React, { FC, useState, useEffect } from 'react';\nimport { useFetch } from '../../utils/useFetch';\nimport { service_states, HOST_IP } from '../../utils/types';\nimport { Card, CardContent, TextField } from '@material-ui/core';\nimport {\n  RoutesSummary,\n  QueryResponse,\n  chartData,\n  APIQueryResponse\n} from '../../utils/queryTypes';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Alert from '@material-ui/lab/Alert';\nimport { formatTime } from '../../utils/brt';\nimport Jitter from '../Monitoring/Jitter';\nimport { filterUrl } from '../../utils/filterUrl';\n\nconst format = (datas: QueryResponse) => {\n  const jitter: chartData[] = [];\n\n  for (const value of datas.values) {\n    jitter.push({\n      y: value.value.value,\n      x: formatTime(value.timestamp)\n    });\n  }\n\n  return {\n    jitter\n  };\n};\n\ninterface showChartsDataParam {\n  jitter: chartData[];\n}\n\nconst JitterModule: FC<{}> = () => {\n  const [routesDetails, setRoutesDetails] = useState<RoutesSummary>();\n  const [value] = useState(routesDetails?.testServicesRoutes[0]);\n  const [inputValue, setInputValue] = useState('');\n  const [showCharts, setShowCharts] = useState(false);\n  const [jitterData, setJitterData] = useState<showChartsDataParam>();\n\n  const { response, error } = useFetch<service_states>(\n    `${HOST_IP}/service-state`\n  );\n\n  useEffect(() => {\n    fetch(`${HOST_IP}/routes-summary`)\n      .then(res => res.json())\n      .then((response: { status: string; data: RoutesSummary }) => {\n        setRoutesDetails(response.data);\n      });\n  }, []);\n\n  async function getChartsData(v: any) {\n    const res = filterUrl(v);\n    try {\n      const response = await fetch(\n        `${HOST_IP}/query?timeSeriesPath=storage/jitter/chunk_jitter_${res}`\n      );\n      const matrix = (await response.json()) as APIQueryResponse;\n      var formatdata = format(matrix.data);\n      setJitterData(formatdata);\n      setShowCharts(true);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  if (error) {\n    return <Alert severity=\"error\">Unable to reach the service: error</Alert>;\n  }\n  if (!response.data) {\n    return <Alert severity=\"info\">Fetching from sources</Alert>;\n  }\n\n  // const states: service_states = response.data;\n  const options =\n    routesDetails?.testServicesRoutes !== undefined\n      ? routesDetails.testServicesRoutes\n      : ['Please fill routes'];\n\n  return (\n    <Card>\n      <CardContent>\n        <div>\n          <h4>Jitter</h4>\n          <div style={{ float: 'right', marginTop: '-45px' }}>\n            <Autocomplete\n              value={value}\n              onChange={(event, newValue) => {}}\n              inputValue={inputValue}\n              onInputChange={(event, newInputValue) => {\n                setInputValue(newInputValue);\n                getChartsData(newInputValue);\n              }}\n              id=\"controllable-states-demo\"\n              options={options}\n              style={{ width: 300 }}\n              renderInput={params => (\n                <TextField\n                  {...params}\n                  label=\"Select Route\"\n                  variant=\"outlined\"\n                />\n              )}\n            />\n          </div>\n        </div>\n        <br />\n        <hr />\n        <div>\n          {jitterData !== undefined && showCharts ? (\n            <Jitter value={jitterData.jitter} />\n          ) : null}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default JitterModule;\n","interface Column {\n  label: string;\n  minWidth: number;\n  align: 'right' | 'center' | 'left';\n  format?: (value: number) => string;\n}\n\nexport const columns: Column[] = [\n  { label: 'Name', minWidth: 170, align: 'left' },\n  { label: 'Ping', minWidth: 100, align: 'center' },\n  {\n    label: 'Jitter',\n    minWidth: 170,\n    align: 'center',\n    format: (value: number) => value.toLocaleString('en-US')\n  },\n  {\n    label: 'Response time',\n    minWidth: 170,\n    align: 'center',\n    format: (value: number) => value.toLocaleString('en-US')\n  },\n  {\n    label: 'Response length',\n    minWidth: 170,\n    align: 'center',\n    format: (value: number) => value.toFixed(2)\n  },\n  {\n    label: 'Status',\n    minWidth: 170,\n    align: 'center',\n    format: (value: number) => value.toFixed(2)\n  },\n  {\n    label: '',\n    minWidth: 10,\n    align: 'center',\n    format: (value: number) => value.toFixed(2)\n  }\n];\n","import React, { FC, useState, useEffect } from 'react';\nimport { HOST_IP } from '../../utils/types';\nimport {\n  TimeSeriesPath,\n  MatrixResponse,\n  RouteDetails\n} from '../../utils/queryTypes';\nimport { columns } from './Columns';\nimport TimeInstance from '../../utils/brt';\n\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport WarningOutlinedIcon from '@material-ui/icons/WarningOutlined';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\n\nimport { Badge } from 'reactstrap';\n\ntype APIResponse<MatrixResponse> = { status: string; data: MatrixResponse };\n\ninterface MatrixProps {\n  timeSeriesPath: TimeSeriesPath[];\n  showRouteDetails(status: boolean, details: RouteDetails): void;\n}\n\ninterface ElementProps {\n  timeSeriesPath: TimeSeriesPath;\n  showRouteDetails(status: boolean, details: RouteDetails): void;\n}\n\nconst round = (n: string): number => {\n  const num = parseInt(n, 10);\n  return Math.round(num * 10) / 10;\n};\n\nconst Pad: FC<{}> = () => <span>&nbsp;&nbsp;&nbsp;&nbsp;</span>;\n\nconst Element: FC<ElementProps> = ({ timeSeriesPath, showRouteDetails }) => {\n  const [data, setData] = useState<MatrixResponse>();\n  const [trigger, setTrigger] = useState<number>(0);\n  const [updating, setUpdating] = useState<boolean>(true);\n  const [warning, showWarning] = useState<boolean>(false);\n  const endTimestamp = new Date().getTime() * 1000000 - TimeInstance.Hour;\n\n  const fetchTimeSeriesDetails = async (instance: TimeSeriesPath) => {\n    const monitoringDetails = new Promise<RouteDetails>((resolve, reject) => {\n      async function fetchDetails() {\n        try {\n          const response = await fetch(\n            `${HOST_IP}/query-matrix?routeNameMatrix=${instance.path.matrixName}&endTimestamp=${endTimestamp}`\n          );\n          const matrix = (await response.json()) as APIResponse<RouteDetails>;\n          resolve(matrix.data);\n        } catch (e) {\n          console.error(e);\n          showWarning(true);\n          reject(e);\n        }\n      }\n      fetchDetails();\n    });\n\n    const details = await monitoringDetails;\n    showRouteDetails(true, details);\n  };\n\n  useEffect(() => {\n    async function fetchMatrix(name: string) {\n      try {\n        setUpdating(true);\n        const response = await fetch(\n          `${HOST_IP}/query-matrix?routeNameMatrix=${name}`\n        );\n        const inMatrixResponse = (await response.json()) as APIResponse<\n          MatrixResponse\n        >;\n        setData(inMatrixResponse.data);\n        setTimeout(() => {\n          setUpdating(false);\n          showWarning(false);\n        }, 1000);\n      } catch (e) {\n        console.error(e);\n        showWarning(true);\n        return null;\n      }\n    }\n    fetchMatrix(timeSeriesPath.path.matrixName);\n  }, [trigger, timeSeriesPath.path.matrixName]);\n\n  if (!data) {\n    return (\n      <TableRow className=\"table-data-row\" key={timeSeriesPath.path.matrixName}>\n        <TableCell style={{ minWidth: 170, fontSize: 16 }} align=\"left\">\n          <Badge color=\"light\">{timeSeriesPath.name}</Badge>\n        </TableCell>\n        <TableCell\n          style={{ minWidth: 100, fontSize: 16 }}\n          align=\"center\"\n        ></TableCell>\n        <TableCell\n          style={{ minWidth: 170, fontSize: 16 }}\n          align=\"center\"\n        ></TableCell>\n        <TableCell style={{ minWidth: 170 }} align=\"center\"></TableCell>\n        <TableCell style={{ minWidth: 170 }} align=\"center\"></TableCell>\n        <TableCell\n          style={{ minWidth: 170, fontSize: 16 }}\n          align=\"center\"\n        ></TableCell>\n        <TableCell style={{ minWidth: 10, fontSize: 16 }} align=\"center\">\n          {updating ? (\n            <CircularProgress disableShrink size={15} thickness={4} />\n          ) : (\n            <Pad />\n          )}\n        </TableCell>\n      </TableRow>\n    );\n  }\n\n  setTimeout(() => {\n    setTrigger(trigger + 1);\n  }, 10 * 1000);\n\n  return (\n    <TableRow>\n      <TableCell style={{ minWidth: 170, fontSize: 16 }} align=\"left\">\n        <Badge color=\"light\">{timeSeriesPath.name}</Badge>\n      </TableCell>\n      <TableCell style={{ minWidth: 100, fontSize: 16 }} align=\"center\">\n        <Badge color=\"warning\">\n          {data.ping === undefined\n            ? '-'\n            : round(data.ping.values[0].value.avgValue)}{' '}\n          ms\n        </Badge>\n      </TableCell>\n      <TableCell style={{ minWidth: 170, fontSize: 16 }} align=\"center\">\n        <Badge color=\"warning\">\n          {data.jitter === undefined\n            ? '-'\n            : round(data.jitter.values[0].value.value)}{' '}\n          ms\n        </Badge>\n      </TableCell>\n      <TableCell style={{ minWidth: 170, fontSize: 16 }} align=\"center\">\n        <Badge color=\"warning\">\n          {data.monitor === undefined\n            ? '-'\n            : data.monitor.values[0].value.delay}{' '}\n          ms\n        </Badge>\n      </TableCell>\n      <TableCell style={{ minWidth: 170, fontSize: 16 }} align=\"center\">\n        <Badge color=\"warning\">\n          {data.monitor === undefined\n            ? '-'\n            : data.monitor.values[0].value.resLength}\n        </Badge>\n      </TableCell>\n      <TableCell style={{ minWidth: 170, fontSize: 16 }} align=\"center\">\n        <Badge color=\"success\">{'UP'}</Badge>\n      </TableCell>\n      <TableCell style={{ minWidth: 10, fontSize: 16 }} align=\"center\">\n        {warning ? (\n          <WarningOutlinedIcon />\n        ) : updating ? (\n          // sizes are kept in accordance with the ArrowForwardIcon. Do not change them.\n          <CircularProgress disableShrink size={19} thickness={4} />\n        ) : (\n          <span onClick={() => fetchTimeSeriesDetails(timeSeriesPath)}>\n            <ArrowForwardIcon color=\"primary\" />\n          </span>\n        )}\n      </TableCell>\n    </TableRow>\n  );\n};\n\nconst Matrix: FC<MatrixProps> = ({ timeSeriesPath, showRouteDetails }) => (\n  <TableContainer style={{ maxHeight: '100vh', overflowY: 'hidden' }}>\n    <Table stickyHeader>\n      <TableHead>\n        <TableRow>\n          {columns.map((column, i) => (\n            <TableCell\n              key={i}\n              align={column.align}\n              style={{\n                minWidth: column.minWidth,\n                fontWeight: 600,\n                fontSize: 15\n              }}\n            >\n              {column.label}\n            </TableCell>\n          ))}\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {timeSeriesPath.map((series, i) => (\n          <Element\n            timeSeriesPath={series}\n            showRouteDetails={showRouteDetails}\n            key={i}\n          />\n        ))}\n      </TableBody>\n    </Table>\n  </TableContainer>\n);\n\nexport default Matrix;\n","import React, { FC } from 'react';\nimport Chart from 'react-apexcharts';\nimport { chartData } from '../../utils/queryTypes';\n\ninterface ResLengthProps {\n  resLength: chartData[];\n}\n\nconst ResLength: FC<ResLengthProps> = ({ resLength }) => {\n  const series = [\n    {\n      name: 'CPU',\n      data: resLength\n    }\n  ];\n  const options = {\n    chart: {\n      type: 'area',\n      animations: {\n        enabled: true,\n        easing: 'easeinout',\n        speed: 800,\n        animateGradually: {\n          enabled: true,\n          delay: 150\n        },\n        dynamicAnimation: {\n          enabled: true,\n          speed: 350\n        }\n      },\n      background: '#fff'\n    }\n  };\n  return <Chart series={series} options={options} height=\"300\" />;\n};\n\nexport default ResLength;\n","import React, { FC } from 'react';\nimport Chart from 'react-apexcharts';\nimport { chartData } from '../../utils/queryTypes';\n\ninterface DelayProps {\n  delay: chartData[];\n}\n\nconst Delay: FC<DelayProps> = ({ delay }) => {\n  const series = [\n    {\n      name: 'CPU',\n      data: delay\n    }\n  ];\n  const options = {\n    chart: {\n      type: 'area',\n      animations: {\n        enabled: true,\n        easing: 'easeinout',\n        speed: 800,\n        animateGradually: {\n          enabled: true,\n          delay: 150\n        },\n        dynamicAnimation: {\n          enabled: true,\n          speed: 350\n        }\n      },\n      background: '#fff'\n    }\n  };\n  return <Chart series={series} options={options} height=\"300\" />;\n};\n\nexport default Delay;\n","import React, { FC } from 'react';\nimport Chart from 'react-apexcharts';\nimport { chartData } from '../../utils/queryTypes';\n\ninterface PingProps {\n  min: chartData[];\n  mean: chartData[];\n  max: chartData[];\n}\n\nconst Ping: FC<PingProps> = ({ min, mean, max }) => {\n  const series = [\n    {\n      name: 'min',\n      data: min\n    },\n    {\n      name: 'mean',\n      data: mean\n    },\n    {\n      name: 'max',\n      data: max\n    }\n  ];\n  const options = {\n    chart: {\n      type: 'area',\n      xaxis: {\n        type: 'category',\n        categories: [],\n        labels: {\n          show: true,\n          rotate: 0,\n          rotateAlways: false,\n          hideOverlappingLabels: true,\n          trim: true\n        }\n      },\n      animations: {\n        enabled: true,\n        easing: 'easeinout',\n        speed: 800,\n        animateGradually: {\n          enabled: true,\n          delay: 150\n        },\n        dynamicAnimation: {\n          enabled: true,\n          speed: 350\n        }\n      },\n      background: '#fff'\n    }\n  };\n  return <Chart series={series} options={options} height=\"300\" />;\n};\n\nexport default Ping;\n","import React, { FC } from 'react';\nimport { chartData, RouteDetails } from '../../utils/queryTypes';\nimport { formatTime } from '../../utils/brt';\nimport ResLength from './ResLength';\nimport Delay from './Delay';\nimport Ping from './Ping';\nimport Jitter from './Jitter';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport PropTypes from 'prop-types';\nimport Box from '@material-ui/core/Box';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\n\ninterface RouteDetailsProps {\n  routesChains: RouteDetails;\n  showDetails(status: boolean, details: RouteDetails): void;\n}\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`\n  };\n}\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box p={3}>{children}</Box>}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired\n};\n\nconst format = (data: RouteDetails) => {\n  const responseDetailsDelay: chartData[] = [];\n  const responseDetailsResponse: chartData[] = [];\n  const pingMin: chartData[] = [];\n  const pingMean: chartData[] = [];\n  const pingMax: chartData[] = [];\n  const jitter: chartData[] = [];\n\n  for (const value of data.monitor.values) {\n    responseDetailsDelay.push({\n      y: value.value.delay,\n      x: formatTime(value.timestamp)\n    });\n    responseDetailsResponse.push({\n      y: value.value.resLength,\n      x: formatTime(value.timestamp)\n    });\n  }\n  for (const value of data.ping.values) {\n    pingMin.push({\n      y: value.value.minValue,\n      x: formatTime(value.timestamp)\n    });\n    pingMean.push({\n      y: value.value.avgValue,\n      x: formatTime(value.timestamp)\n    });\n    pingMax.push({\n      y: value.value.maxValue,\n      x: formatTime(value.timestamp)\n    });\n  }\n  for (const value of data.jitter.values) {\n    jitter.push({\n      y: value.value.value,\n      x: formatTime(value.timestamp)\n    });\n  }\n\n  return {\n    responseDetailsDelay,\n    responseDetailsResponse,\n    pingMin,\n    pingMean,\n    pingMax,\n    jitter\n  };\n};\n\nconst RouteDetailsComponent: FC<RouteDetailsProps> = ({\n  routesChains,\n  showDetails\n}) => {\n  const [value, setValue] = React.useState(0);\n  const handleChange = (_event, newValue) => {\n    setValue(newValue);\n  };\n  const data = format(routesChains);\n  return (\n    <>\n      <span onClick={() => showDetails(false, routesChains)}>\n        <ArrowBackIcon color=\"primary\" fontSize=\"large\" />\n      </span>\n      <hr />\n      <AppBar position=\"static\">\n        <Tabs value={value} onChange={handleChange} indicatorColor=\"secondary\">\n          <Tab label=\"Response length\" {...a11yProps(0)} />\n          <Tab label=\"Response delay\" {...a11yProps(1)} />\n          <Tab label=\"Ping\" {...a11yProps(2)} />\n          <Tab label=\"Jitter\" {...a11yProps(3)} />\n        </Tabs>\n      </AppBar>\n      <TabPanel value={value} index={0}>\n        <ResLength resLength={data.responseDetailsResponse} />\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <Delay delay={data.responseDetailsDelay} />\n      </TabPanel>\n      <TabPanel value={value} index={2}>\n        <Ping min={data.pingMin} mean={data.pingMean} max={data.pingMax} />\n      </TabPanel>\n      <TabPanel value={value} index={3}>\n        <Jitter value={data.jitter} />\n      </TabPanel>\n    </>\n  );\n};\n\nexport default RouteDetailsComponent;\n","import React, { FC, useEffect, useState } from 'react';\nimport { useFetch } from '../../utils/useFetch';\nimport { HOST_IP } from '../../utils/types';\nimport Matrix from './Matrix';\nimport { TimeSeriesPath, RouteDetails } from '../../utils/queryTypes';\nimport RouteDetailsComponent from './RouteDetails';\nimport { Card, CardContent } from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport Switch from '@material-ui/core/Switch';\n\ninterface MonitoringProps {\n  updateLoader(status: boolean): void;\n}\n\nconst ServicesState: FC<{}> = () => {\n  const [isActive, setIsActive] = useState<boolean>(false);\n  const fetchState = () => {\n    fetch(`${HOST_IP}/get-monitoring-services-state`)\n      .then(res => res.json())\n      .then((response: { status: string; data: string }) => {\n        if (response.data === 'active') {\n          setIsActive(true);\n        } else {\n          setIsActive(false);\n        }\n      });\n  };\n  const updateServicesState = () => {\n    fetch(\n      `${HOST_IP}/update-monitoring-services-state?state=${\n        isActive ? 'stop' : 'start'\n      }`\n    )\n      .then(res => res.json())\n      .then((response: boolean) => {\n        if (response) {\n          fetchState();\n        }\n      });\n  };\n  fetchState();\n  return (\n    <Switch\n      checked={isActive}\n      color=\"primary\"\n      onChange={() => updateServicesState()}\n    />\n  );\n};\n\nconst Monitoring: FC<MonitoringProps> = ({ updateLoader }) => {\n  const { response, error } = useFetch<TimeSeriesPath[]>(\n    `${HOST_IP}/get-route-time-series`\n  );\n  const [showRouteDetails, setShowRouteDetails] = useState<boolean>(false);\n  const [routeDetailsData, setRouteDetailsData] = useState<RouteDetails>();\n  const showDetails = (status: boolean, details: RouteDetails): void => {\n    setShowRouteDetails(status);\n    setRouteDetailsData(details);\n  };\n  useEffect(() => {\n    updateLoader(true);\n  }, [updateLoader]);\n  if (error) {\n    return (\n      <Card>\n        <CardContent>\n          <h4>Monitoring</h4>\n          <hr />\n          <Alert severity=\"error\">Unable to reach the service: error</Alert>\n        </CardContent>\n      </Card>\n    );\n  }\n  if (!response.data) {\n    return (\n      <Card>\n        <CardContent>\n          <h4>Monitoring</h4>\n          <hr />\n          <Alert severity=\"info\">Fetching data from sources</Alert>\n        </CardContent>\n      </Card>\n    );\n  }\n  updateLoader(false);\n  return (\n    <Card>\n      <CardContent>\n        {!showRouteDetails || !routeDetailsData ? (\n          <>\n            <h4>\n              Monitoring <ServicesState />\n            </h4>\n            <hr />\n            <Matrix\n              timeSeriesPath={response.data}\n              showRouteDetails={showDetails}\n            />\n          </>\n        ) : (\n          <RouteDetailsComponent\n            routesChains={routeDetailsData}\n            showDetails={showDetails}\n          />\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default Monitoring;\n","import React, { FC, useState, useEffect } from 'react';\nimport { useFetch } from '../../utils/useFetch';\nimport { service_states, HOST_IP } from '../../utils/types';\nimport { Card, CardContent, TextField } from '@material-ui/core';\nimport {\n  RoutesSummary,\n  QueryResponse,\n  chartData,\n  APIQueryResponse\n} from '../../utils/queryTypes';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Alert from '@material-ui/lab/Alert';\nimport { formatTime } from '../../utils/brt';\nimport Ping from '../Monitoring/Ping';\nimport { filterUrl } from '../../utils/filterUrl';\n\nconst format = (datas: QueryResponse) => {\n  const pingMin: chartData[] = [];\n  const pingMean: chartData[] = [];\n  const pingMax: chartData[] = [];\n\n  for (const value of datas.values) {\n    pingMin.push({\n      y: value.value.minValue,\n      x: formatTime(value.timestamp)\n    });\n    pingMean.push({\n      y: value.value.avgValue,\n      x: formatTime(value.timestamp)\n    });\n    pingMax.push({\n      y: value.value.maxValue,\n      x: formatTime(value.timestamp)\n    });\n  }\n\n  return {\n    pingMin,\n    pingMean,\n    pingMax\n  };\n};\n\ninterface showChartsDataParam {\n  pingMin: chartData[];\n  pingMean: chartData[];\n  pingMax: chartData[];\n}\n\nconst PingModule: FC<{}> = () => {\n  const [routesDetails, setRoutesDetails] = useState<RoutesSummary>();\n  const [value] = useState(routesDetails?.testServicesRoutes[0]);\n  const [inputValue, setInputValue] = useState('');\n  const [showCharts, setShowCharts] = useState(false);\n  const [pingData, setPingData] = useState<showChartsDataParam>();\n\n  const { response, error } = useFetch<service_states>(\n    `${HOST_IP}/service-state`\n  );\n\n  useEffect(() => {\n    fetch(`${HOST_IP}/routes-summary`)\n      .then(res => res.json())\n      .then((response: { status: string; data: RoutesSummary }) => {\n        setRoutesDetails(response.data);\n      });\n  }, []);\n\n  async function getChartsData(v: any) {\n    const res = filterUrl(v);\n    try {\n      const response = await fetch(\n        `${HOST_IP}/query?timeSeriesPath=storage/ping/chunk_ping_${res}`\n      );\n      const matrix = (await response.json()) as APIQueryResponse;\n      var formatdata = format(matrix.data);\n      setPingData(formatdata);\n      setShowCharts(true);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  if (error) {\n    return <Alert severity=\"error\">Unable to reach the service: error</Alert>;\n  }\n  if (!response.data) {\n    return <Alert severity=\"info\">Fetching from sources</Alert>;\n  }\n\n  // TODO: add the status icon for the module\n  // const states: service_states = response.data;\n\n  const options =\n    routesDetails?.testServicesRoutes !== undefined\n      ? routesDetails.testServicesRoutes\n      : ['Please fill routes'];\n\n  return (\n    <Card>\n      <CardContent>\n        <div>\n          <h4>Ping</h4>\n          <div style={{ float: 'right', marginTop: '-45px' }}>\n            <Autocomplete\n              value={value}\n              onChange={(event, newValue) => {}}\n              inputValue={inputValue}\n              onInputChange={(event, newInputValue) => {\n                setInputValue(newInputValue);\n                getChartsData(newInputValue);\n              }}\n              id=\"controllable-states-demo\"\n              options={options}\n              style={{ width: 300 }}\n              renderInput={params => (\n                <TextField\n                  {...params}\n                  label=\"Select Route\"\n                  variant=\"outlined\"\n                />\n              )}\n            />\n          </div>\n        </div>\n        <br />\n        <hr />\n        <div>\n          {pingData !== undefined && showCharts ? (\n            <Ping\n              min={pingData.pingMin}\n              mean={pingData.pingMean}\n              max={pingData.pingMax}\n            />\n          ) : null}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default PingModule;\n","import React, { FC } from 'react';\n\nconst Settings: FC<{}> = () => {\n  return <div>This is settings</div>;\n};\n\nexport default Settings;\n","import React, { FC } from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Dashboard from '../pages/Dashboard/Dashboard';\nimport FloodPing from '../pages/FloodPing';\nimport JitterModule from '../pages/Jitter/JitterModule';\nimport Monitoring from '../pages/Monitoring/Monitoring';\nimport PingModule from '../pages/Ping/PingModule';\nimport Settings from '../pages/Settings';\n\ninterface NavigatorProps {\n  updateLoader(status: boolean): void;\n}\n\nconst Navigator: FC<NavigatorProps> = ({ updateLoader }) => {\n  return (\n    <Router>\n      <Switch>\n        <Route\n          exact={true}\n          path=\"/\"\n          render={props => <Dashboard updateLoader={updateLoader} />}\n        />\n        <Route\n          exact={true}\n          path=\"/monitoring\"\n          render={props => <Monitoring updateLoader={updateLoader} />}\n        />\n        <Route path=\"/ping\" component={PingModule} />\n        <Route path=\"/floodping\" component={FloodPing} />\n        <Route path=\"/jitter\" component={JitterModule} />\n        <Route path=\"/settings\" component={Settings} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default Navigator;\n","import {\n  Collapse,\n  Divider,\n  Drawer,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  AccessAlarm as AccessAlarmIcon,\n  ChevronLeft as ChevronLeftIcon,\n  Dashboard as DashboardIcon,\n  ExpandLess as ExpandLessIcon,\n  ExpandMore as ExpandMoreIcon,\n  NetworkCheck as NetworkCheckIcon,\n  Settings as SettingsIcon\n} from '@material-ui/icons';\nimport clsx from 'clsx';\nimport React, { FC, useState } from 'react';\nimport { HashRouter as Router, Link } from 'react-router-dom';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n  // root class\n  root: {\n    display: 'flex'\n  },\n  // Nested lists\n  nested: {\n    paddingLeft: theme.spacing(4),\n    backgroundColor: '#DCDCDC'\n  },\n  // Drawer styles\n  drawerPaper: {\n    position: 'relative',\n    whiteSpace: 'nowrap',\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  drawerPaperClose: {\n    overflowX: 'hidden',\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    width: theme.spacing(7),\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(9)\n    }\n  },\n  toolbarIcon: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: '0 8px',\n    ...theme.mixins.toolbar\n  },\n  // SettingsIcon\n  settings: {\n    position: 'absolute',\n    bottom: 0,\n    alignItems: 'center'\n  }\n}));\n\ninterface SidebarProps {\n  open: boolean;\n  handleDrawerClose(): void;\n}\n\nconst Sidebar: FC<SidebarProps> = ({ handleDrawerClose, open }) => {\n  const classes = useStyles();\n\n  // Sidebar element\n  const [testListOpen, setTestListOpen] = useState(false);\n  const showTestList = () => {\n    setTestListOpen(!testListOpen);\n  };\n  const menuItems = (\n    <div>\n      <ListItem button={true} component={Link} to=\"/\">\n        <ListItemIcon>\n          <DashboardIcon />\n        </ListItemIcon>\n        <ListItemText primary=\"Dashboard\" />\n      </ListItem>\n      <ListItem button={true} component={Link} to=\"/monitoring\">\n        <ListItemIcon>\n          <AccessAlarmIcon />\n        </ListItemIcon>\n        <ListItemText primary=\"Monitoring\" />\n      </ListItem>\n      <ListItem button={true}>\n        <ListItemIcon>\n          <NetworkCheckIcon />\n        </ListItemIcon>\n        <ListItemText primary=\"Tests\" onClick={showTestList} />\n        {open ? (\n          <ExpandLessIcon onClick={showTestList} />\n        ) : (\n          <ExpandMoreIcon onClick={showTestList} />\n        )}\n      </ListItem>\n      {/* Nested List */}\n      <Collapse in={testListOpen} timeout=\"auto\" unmountOnExit={true}>\n        <List component=\"div\" disablePadding={true}>\n          <ListItem\n            button={true}\n            component={Link}\n            to=\"/ping\"\n            className={classes.nested}\n          >\n            <ListItemIcon>\n              <DashboardIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Ping\" />\n          </ListItem>\n          <ListItem\n            button={true}\n            component={Link}\n            to=\"/floodping\"\n            className={classes.nested}\n          >\n            <ListItemIcon>\n              <DashboardIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"FloodPing\" />\n          </ListItem>\n          <ListItem\n            button={true}\n            component={Link}\n            to=\"/jitter\"\n            className={classes.nested}\n          >\n            <ListItemIcon>\n              <DashboardIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Jitter\" />\n          </ListItem>\n        </List>\n      </Collapse>\n    </div>\n  );\n\n  return (\n    <div className={classes.root}>\n      <Router>\n        <Drawer\n          variant=\"permanent\"\n          classes={{\n            paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose)\n          }}\n          open={open}\n        >\n          <div className={classes.toolbarIcon}>\n            <IconButton onClick={handleDrawerClose}>\n              <ChevronLeftIcon />\n            </IconButton>\n          </div>\n          <Divider />\n          <List>{menuItems}</List>\n          <ListItem\n            button={true}\n            component={Link}\n            to=\"/settings\"\n            className={classes.settings}\n          >\n            <ListItemIcon>\n              <SettingsIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Settings\" />\n          </ListItem>\n        </Drawer>\n      </Router>\n    </div>\n  );\n};\n\nexport default Sidebar;\n","import { CssBaseline } from '@material-ui/core';\nimport { Container } from '@material-ui/core';\nimport { AppBar, IconButton, Toolbar, Typography } from '@material-ui/core';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Menu as MenuIcon } from '@material-ui/icons';\nimport clsx from 'clsx';\nimport React, { ReactElement, useCallback, useState } from 'react';\nimport Navigator from '../router/Navigation';\nimport Sidebar from './Sidebar';\n\nconst drawerWidth = 240;\n\nconst _useStyles = makeStyles(theme => ({\n  // AppBar styles\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  title: {\n    flexGrow: 1\n  },\n  // Toolbar styles\n  toolbar: {\n    paddingRight: 24 // keep right padding when drawer closed\n  },\n  // IconMenu styles\n  menuButton: {\n    marginRight: 36\n  },\n  menuButtonHidden: {\n    display: 'none'\n  }\n}));\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex'\n  },\n  color: {\n    primary: theme.palette.primary\n  },\n  // Content styles\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    height: '100vh',\n    overflow: 'auto'\n  },\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4)\n  }\n}));\n\nexport default function BaseLayout(): ReactElement {\n  // Access styles\n  const classes = useStyles();\n  const _classes = _useStyles();\n  const [loader, setLoader] = useState<boolean>(false);\n\n  const updateLoader = useCallback((status: boolean) => {\n    setLoader(status);\n  }, []);\n\n  // Opens and closes the drawer\n  const [open, setOpen] = useState(true);\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      {/* Navbar */}\n      <div className=\"_navbar\">\n        <AppBar\n          position=\"absolute\"\n          className={clsx(_classes.appBar, open && _classes.appBarShift)}\n        >\n          <Toolbar className={_classes.toolbar}>\n            <IconButton\n              edge=\"start\"\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              onClick={handleDrawerOpen}\n              className={clsx(\n                _classes.menuButton,\n                open && _classes.menuButtonHidden\n              )}\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography\n              component=\"h1\"\n              variant=\"h6\"\n              color=\"inherit\"\n              noWrap={true}\n              className={_classes.title}\n            >\n              Bench Routes\n            </Typography>\n          </Toolbar>\n          {loader ? <LinearProgress /> : null}\n        </AppBar>\n      </div>\n      <Sidebar handleDrawerClose={handleDrawerClose} open={open} />\n      <main className={classes.content}>\n        <div className={classes.appBarSpacer} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n          <Navigator updateLoader={updateLoader} />\n        </Container>\n      </main>\n    </div>\n  );\n}\n","import { blue } from '@material-ui/core/colors';\nimport {\n  createMuiTheme,\n  responsiveFontSizes,\n  ThemeProvider\n} from '@material-ui/core/styles';\nimport React from 'react';\nimport './App.css';\nimport './assets/bootstrap.min.css';\nimport BaseLayout from './layouts/BaseLayout';\n\nlet theme = createMuiTheme({\n  palette: {\n    // Provides you with all\n    // shades of whites\n    primary: blue\n    // secondary: <Color>,\n  },\n  typography: {\n    fontFamily: ['Lato', 'Raleway'].join(','),\n    fontSize: 12\n  }\n});\ntheme = responsiveFontSizes(theme);\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <BaseLayout />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}