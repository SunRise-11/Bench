package main

import (
	"unsafe"
	"log"
	"time"

	"io/ioutil"
	"errors"
	"fmt"
	"encoding/json"
)

// Block use case block for the TSDB chain
type Block struct {
	PrevBlock 		*Block
	NextBlock 		*Block
	Datapoint 		int
	NormalizedTime 	int64
	Timestamp 		time.Time
}

// BlockJSON helps reffer Block as JSON
type BlockJSON struct {
	Datapoint 		int 		`json:"datapoint"`
	NormalizedTime 	int64		`json:"normalizedTime"`
	Timestamp 		time.Time 	`json:"timestamp"`
}

// Chain contains Blocks arranged as a chain
type Chain struct {
	path 			string 
	chain 			[]Block
	lengthElements 	int
	size 		   	uintptr
}

// TSDB implements the idea of tsdb
type TSDB interface {
	// Init helps to initialize the tsdb chain for the respective component. This function
	// should be capable to detect existing wals of the required type and build from the
	// local storage at the init of main thread and return the chain address in order to
	// have a minimal effect on the performance.
	// Takes *path* as path to the existing chain or for creating a new one.
	// Returns address of the chain in RAM.
	Init(path *string) *[]Block

	// Append appends a new tsdb block passed as params to the most recent location (or
	// the last location) of the chain. Returns success status.
	Append(b *Block) bool

	// GetPositionalPointer accepts the normalized time, searches for the block with that time
	// using jump search, and returns the address of the block having the specified normalized
	// time.
	GetPositionalPointer(n uint64) *Block

	// PopPreviousNBlocks pops or removes **n** previous blocks from the chain and returns
	// success status.
	PopPreviousNBlocks(n uint64) bool

	// GetChain returns the address of chain.
	GetChain() *[]Block

	// Save saves or commits the chain in storage and returns success status.
	Save() bool
}

func parse(path string) (*string, error) {
	res, err := ioutil.ReadFile(path)
	if err != nil {
		return nil, errors.New("file not existed. create a new chain")
	}
	str := string(res)
	return &str, nil
}

func loadFromStorage(raw *string) *[]Block {
	inst := []Block{}
	b := []byte(*raw)
	e := json.Unmarshal(b, &inst)
	fmt.Println(inst)
	if e != nil {
		panic(e)
	}
	return &inst
}

// Init initialize Chain properties
func (c Chain) Init(path *string) *[]Block {
	res, e := parse(*path)
	if e != nil {
		log.Printf("chain not found at %s. creating one ...", *path)
		c.path = *path
		c.lengthElements = 0
		c.size = unsafe.Sizeof(c)
		c.chain = []Block{}
		return &c.chain
	}

	c.path = *path
	c.chain = *loadFromStorage(res)
	c.lengthElements = len(c.chain)
	c.size = unsafe.Sizeof(c)
	return &c.chain
}

func main() {
	arr := []Block{}
	for i:=0; i < 100; i++ {
		inst := Block{}
		inst.Datapoint = i*100
		inst.NormalizedTime = time.Now().Unix()
		inst.Timestamp = time.Now()
		arr = append(arr, inst)
		if i == 0 {
			arr[i].PrevBlock = nil
		} else {
			arr[i].PrevBlock = &arr[i-1]
		}
		fmt.Println(arr[i])
	}
	//  assign nextBlock addresses
	for i:=0; i<100 - 1; i++ {
		if i == 9 {
			arr[i].NextBlock = nil
		} else {
			arr[i].NextBlock = &arr[i+1]
		}
	}

	// convert to json
	arrJSON := []BlockJSON{}
	for i:=0; i<len(arr); i++ {
		inst := BlockJSON{}
		inst.Datapoint = arr[i].Datapoint
		inst.NormalizedTime = (arr[i].NormalizedTime)
		inst.Timestamp = arr[i].Timestamp
		arrJSON = append(arrJSON, inst)
	}

	jsons, e := json.Marshal(arrJSON)
	if e != nil {
		panic(e)
	}

	fmt.Println(string(jsons))
}
